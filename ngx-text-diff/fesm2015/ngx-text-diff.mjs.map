{"version":3,"file":"ngx-text-diff.mjs","sources":["../../../projects/ngx-text-diff/src/lib/ngx-text-diff.utils.ts","../../../projects/ngx-text-diff/src/lib/ngx-text-diff.service.ts","../../../projects/ngx-text-diff/src/lib/ngx-text-diff-container.directive.ts","../../../projects/ngx-text-diff/src/lib/loader-spinner/loader-spinner.component.html","../../../projects/ngx-text-diff/src/lib/loader-spinner/loader-spinner.component.ts","../../../projects/ngx-text-diff/src/lib/format-line.pipe.ts","../../../projects/ngx-text-diff/src/lib/ngx-text-diff.component.html","../../../projects/ngx-text-diff/src/lib/ngx-text-diff.component.ts","../../../projects/ngx-text-diff/src/lib/ngx-text-diff.module.ts","../../../projects/ngx-text-diff/src/public_api.ts","../../../projects/ngx-text-diff/src/ngx-text-diff.ts"],"sourcesContent":["export const isNil = val => val === undefined || val === null;\nexport const isEmpty = val => val == null || !(Object.keys(val) || val).length || (Object.keys(val) || val).length === 0;\n","import { Injectable } from '@angular/core';\nimport { Diff, DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';\nimport { DiffLineResult, DiffPart, DiffTableRowResult } from './ngx-text-diff.model';\nimport { isEmpty, isNil } from './ngx-text-diff.utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxTextDiffService {\n  diffParser: diff_match_patch;\n\n  constructor() {\n    this.initParser();\n  }\n\n  private initParser() {\n    this.diffParser = new diff_match_patch();\n  }\n\n  getDiffsByLines(left: string, right: string): Promise<DiffTableRowResult[]> {\n    return new Promise<DiffTableRowResult[]>((resolve, reject) => {\n      const a = this.diffParser.diff_linesToChars_(left, right);\n      const lineText1 = a.chars1;\n      const lineText2 = a.chars2;\n      const linesArray = a.lineArray;\n      const diffs: Diff[] = this.diffParser.diff_main(lineText1, lineText2, true);\n      this.diffParser.diff_charsToLines_(diffs, linesArray);\n      const rows: DiffTableRowResult[] = this.formatOutput(diffs);\n      if (!rows) {\n        reject('Error');\n      }\n\n      resolve(rows);\n    });\n  }\n\n  private formatOutput(diffs: Diff[]): DiffTableRowResult[] {\n    let lineLeft = 1;\n    let lineRight = 1;\n    return diffs.reduce((rows: DiffTableRowResult[], diff: Diff) => {\n      if (!rows) {\n        rows = [];\n      }\n      const diffType: number = diff[0];\n      const diffValue: string = diff[1];\n      let leftDiffRow: DiffTableRowResult = null;\n      let rightDiffRow: DiffTableRowResult = null;\n      let leftContent: DiffLineResult = null;\n      let rightContent: DiffLineResult = null;\n      let rowTemp: DiffTableRowResult = null;\n      switch (diffType) {\n        case DIFF_EQUAL: // 0\n          diffValue\n            .split('\\n')\n            .filter((value, index, array) => {\n              if (index === array.length - 1) {\n                return !isEmpty(value);\n              }\n              return true;\n            })\n            .forEach(line => {\n              leftContent = {\n                lineNumber: lineLeft,\n                lineContent: line,\n                lineDiffs: [],\n                prefix: ''\n              };\n              rightContent = {\n                lineNumber: lineRight,\n                lineContent: line,\n                lineDiffs: [],\n                prefix: ''\n              };\n              rowTemp = {\n                leftContent,\n                rightContent,\n                belongTo: 'both',\n                hasDiffs: false,\n                numDiffs: 0,\n              };\n              rows.push(rowTemp);\n              lineRight = lineRight + 1;\n              lineLeft = lineLeft + 1;\n            });\n          break;\n        case DIFF_DELETE: // -1\n          diffValue\n            .split('\\n')\n            .filter((value, index, array) => {\n              if (index === array.length - 1) {\n                return !isEmpty(value);\n              }\n              return true;\n            })\n            .forEach(line => {\n              rightDiffRow = rows.find(\n                row => !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== ''\n              );\n              leftContent = {\n                lineNumber: lineLeft,\n                lineContent: line,\n                lineDiffs: [{ content: line, isDiff: true }],\n                prefix: '-'\n              };\n              if (rightDiffRow) {\n                rightDiffRow.leftContent = leftContent;\n                rightDiffRow.leftContent.lineDiffs = this.getDiffParts(\n                  rightDiffRow.leftContent.lineContent,\n                  rightDiffRow.rightContent.lineContent\n                );\n                rightDiffRow.rightContent.lineDiffs = this.getDiffParts(\n                  rightDiffRow.rightContent.lineContent,\n                  rightDiffRow.leftContent.lineContent\n                );\n                rightDiffRow.belongTo = 'both';\n                rightDiffRow.numDiffs = this.countDiffs(rightDiffRow);\n              } else {\n                rows.push({\n                  leftContent,\n                  rightContent: null,\n                  hasDiffs: true,\n                  belongTo: 'left',\n                  numDiffs: 1,\n                });\n              }\n              lineLeft = lineLeft + 1;\n            });\n          break;\n        case DIFF_INSERT: // 1\n          diffValue\n            .split('\\n')\n            .filter((value, index, array) => {\n              if (index === array.length - 1) {\n                return !isEmpty(value);\n              }\n              return true;\n            })\n            .forEach(line => {\n              leftDiffRow = rows.find(\n                row => row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== ''\n              );\n              rightContent = {\n                lineNumber: lineRight,\n                lineContent: line,\n                lineDiffs: [{ content: line, isDiff: true }],\n                prefix: '+'\n              };\n              if (leftDiffRow) {\n                leftDiffRow.rightContent = rightContent;\n                leftDiffRow.leftContent.lineDiffs = this.getDiffParts(\n                  leftDiffRow.leftContent.lineContent,\n                  leftDiffRow.rightContent.lineContent\n                );\n                leftDiffRow.rightContent.lineDiffs = this.getDiffParts(\n                  leftDiffRow.rightContent.lineContent,\n                  leftDiffRow.leftContent.lineContent\n                );\n                leftDiffRow.belongTo = 'both';\n                leftDiffRow.numDiffs = this.countDiffs(leftDiffRow);\n              } else {\n                rows.push({\n                  leftContent: null,\n                  rightContent,\n                  hasDiffs: true,\n                  belongTo: 'right',\n                  numDiffs: 1,\n                });\n              }\n              lineRight = lineRight + 1;\n            });\n          break;\n      }\n      return rows;\n    }, []);\n  }\n\n  private countDiffs(result: DiffTableRowResult): number {\n    let diffCount = 0;\n    if (result.leftContent) {\n      diffCount += result.leftContent.lineDiffs.filter(diff => diff.isDiff).length;\n    }\n    if (result.leftContent) {\n      diffCount += result.rightContent.lineDiffs.filter(diff => diff.isDiff).length;\n    }\n    return diffCount;\n  }\n\n  private getDiffParts(value: string, compareValue: string): DiffPart[] {\n    const diffParts: DiffPart[] = [];\n    let i = 0;\n    let j = 0;\n    let shared = '';\n    let diff = '';\n\n    while (i < value.length) {\n      if (value[i] === compareValue[j] && j < compareValue.length) {\n        if (diff !== '') {\n          diffParts.push({ content: diff, isDiff: true });\n          diff = '';\n        }\n        shared += value[i];\n      } else {\n        if (shared !== '') {\n          diffParts.push({ content: shared, isDiff: false });\n          shared = '';\n        }\n        diff += value[i];\n      }\n      i++;\n      j++;\n    }\n\n    if (diff !== '') {\n      diffParts.push({ content: diff, isDiff: true });\n    } else if (shared !== '') {\n      diffParts.push({ content: shared, isDiff: false });\n    }\n\n    return diffParts;\n  }\n}\n","import { Directive, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[tdContainer]',\n})\nexport class ContainerDirective {\n  @Input() id: string;\n\n  element: HTMLTableHeaderCellElement;\n\n  constructor(private _el: ElementRef) {\n    this.element = _el.nativeElement;\n  }\n}\n","<div class=\"td-loading-roller\" *ngIf=\"active\">\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'td-loader-spinner',\n  templateUrl: './loader-spinner.component.html',\n  styleUrls: ['./loader-spinner.component.css']\n})\nexport class LoaderSpinnerComponent implements OnInit {\n  @Input() active = false;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatLine'\n})\nexport class FormatLinePipe implements PipeTransform {\n  transform(line: string, diffs?: string[]): string {\n    if (!line) {\n      return ' ';\n    }\n    if (!!diffs && diffs.length > 0) {\n      /*diffs.forEach(diff => {\n        line = line.replace(diff, `<span class=\"highli\">${diff}</span>`);\n      });*/\n    }\n    return line\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/ /g, '&nbsp;');\n  }\n}\n","<td-loader-spinner [active]=\"loading\"></td-loader-spinner>\n<div class=\"td-wrapper\" [ngClass]=\"outerContainerClass\" [ngStyle]=\"outerContainerStyle\" *ngIf=\"!loading\">\n\n  <div [ngClass]=\"toolbarClass\" [ngStyle]=\"toolbarStyle\" *ngIf=\"showToolbar\">\n    <div class=\"td-toolbar-show-diff\">\n      <label class=\"td-checkbox-container\">\n        Only Show Lines with Differences ({{ diffsCount }})\n        <input type=\"checkbox\" id=\"showDiffs\" [ngModel]=\"hideMatchingLines\" (ngModelChange)=\"hideMatchingLinesChanged($event)\" />\n        <span class=\"checkmark\"></span>\n      </label>\n    </div>\n  </div>\n\n  <div class=\"td-toolbar-select-format\" *ngIf=\"showToolbar && showBtnToolbar\">\n    <div class=\"td-btn-group td-btn-group-toggle\" data-toggle=\"buttons\">\n      <button\n        *ngFor=\"let option of formatOptions\"\n        [ngClass]=\"{ active: format === option.value, disabled: !!option.disabled }\"\n        [name]=\"option.name\"\n        [id]=\"option.id\"\n        [disabled]=\"!!option.disabled\"\n        (click)=\"setDiffTableFormat(option.value)\"\n      >\n        {{ option.label }}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"td-table-wrapper\" [ngClass]=\"compareRowsClass\" [ngStyle]=\"compareRowsStyle\">\n    <!-- Right side-by-side -->\n    <div class=\"td-table-container side-by-side\" *ngIf=\"format === 'SideBySide'\" id=\"td-left-compare-container\" tdContainer cdkScrollable>\n      <table class=\"td-table\">\n        <tbody>\n          <tr *ngFor=\"let row of filteredTableRows; trackBy: trackTableRows\">\n            <td\n              scope=\"row\"\n              class=\"fit-column line-number-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\n            >\n              {{ row.leftContent?.lineNumber !== -1 ? row.leftContent?.lineNumber : ' ' }}\n            </td>\n            <td\n              class=\"fit-column prefix-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\n            >\n              <span>{{ row.leftContent?.prefix || ' ' }}</span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\n              *ngIf=\"!row.hasDiffs\"\n            >\n              <span [innerHTML]=\"row.leftContent?.lineContent | formatLine\"></span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\n              *ngIf=\"row.hasDiffs\"\n            >\n              <span\n                [innerHTML]=\"diff.content | formatLine\"\n                [ngClass]=\"{ highlight: diff.isDiff }\"\n                *ngFor=\"let diff of row.leftContent?.lineDiffs; trackBy: trackDiffs\"\n              ></span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <!-- Left side-by-side -->\n    <div class=\"td-table-container side-by-side\" *ngIf=\"format === 'SideBySide'\" id=\"td-right-compare-container\" tdContainer cdkScrollable>\n      <table class=\"td-table\">\n        <tbody>\n          <tr *ngFor=\"let row of filteredTableRows; trackBy: trackTableRows\">\n            <td\n              scope=\"row\"\n              class=\"fit-column line-number-col\"\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\n            >\n              {{ row.rightContent?.lineNumber !== -1 ? row.rightContent?.lineNumber : ' ' }}\n            </td>\n            <td\n              class=\"fit-column prefix-col\"\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\n            >\n              <span>{{ row.rightContent?.prefix || ' ' }}</span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\n              *ngIf=\"!row.hasDiffs\"\n            >\n              <span [innerHTML]=\"row.rightContent?.lineContent | formatLine\"></span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\n              *ngIf=\"row.hasDiffs\"\n            >\n              <span\n                [innerHTML]=\"diff.content | formatLine\"\n                [ngClass]=\"{ highlight: diff.isDiff }\"\n                *ngFor=\"let diff of row.rightContent?.lineDiffs; trackBy: trackDiffs\"\n              ></span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <!-- Line By Line - combined table -->\n    <div class=\"td-table-container line-by-line\" *ngIf=\"format === 'LineByLine'\">\n      <table class=\"td-table\">\n        <tbody>\n          <tr *ngFor=\"let row of filteredTableRowsLineByLine; trackBy: trackTableRows\">\n            <td scope=\"row\" class=\"fit-column line-number-col-left\">{{ row.leftContent?.lineNumber }}</td>\n            <td scope=\"row\" class=\"fit-column line-number-col\">{{ row.rightContent?.lineNumber }}</td>\n            <td\n              class=\"fit-column prefix-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\n            >\n              <span>{{ row.leftContent?.prefix || row.rightContent?.prefix || ' ' }}</span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\n              *ngIf=\"!row.hasDiffs\"\n            >\n              <span [innerHTML]=\"row.leftContent?.lineContent | formatLine\"></span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\n              *ngIf=\"row.hasDiffs && row.leftContent && row.leftContent?.lineDiffs.length !== 0\"\n            >\n              <span\n                [innerHTML]=\"diff.content | formatLine\"\n                [ngClass]=\"{ highlight: diff.isDiff }\"\n                *ngFor=\"let diff of row.leftContent?.lineDiffs; trackBy: trackDiffs\"\n              ></span>\n            </td>\n            <td\n              class=\"content-col\"\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\n              *ngIf=\"row.hasDiffs && row.rightContent && row.rightContent?.lineDiffs.length !== 0\"\n            >\n              <span\n                [innerHTML]=\"diff.content | formatLine\"\n                [ngClass]=\"{ highlight: diff.isDiff }\"\n                *ngFor=\"let diff of row.rightContent?.lineDiffs; trackBy: trackDiffs\"\n              ></span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  EventEmitter,\n  ViewChildren,\n  QueryList,\n  AfterViewInit\n} from '@angular/core';\nimport { DiffContent, DiffPart, DiffTableFormat, DiffTableFormatOption, DiffTableRowResult, DiffResults } from './ngx-text-diff.model';\nimport { NgxTextDiffService } from './ngx-text-diff.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { ContainerDirective } from './ngx-text-diff-container.directive';\nimport { ScrollDispatcher, CdkScrollable } from '@angular/cdk/scrolling';\n\n@Component({\n  selector: 'td-ngx-text-diff',\n  templateUrl: './ngx-text-diff.component.html',\n  styleUrls: ['./ngx-text-diff.component.css'],\n})\nexport class NgxTextDiffComponent implements OnInit, AfterViewInit, OnDestroy {\n  private _hideMatchingLines = false;\n  @ViewChildren(ContainerDirective) containers: QueryList<ContainerDirective>;\n  @Input() format: DiffTableFormat = 'SideBySide';\n  @Input() left = '';\n  @Input() right = '';\n  @Input() diffContent: Observable<DiffContent>;\n  @Input() loading = false;\n  @Input() showToolbar = true;\n  @Input() showBtnToolbar = true;\n  @Input()\n  get hideMatchingLines() {\n    return this._hideMatchingLines;\n  }\n\n  set hideMatchingLines(hide: boolean) {\n    this.hideMatchingLinesChanged(hide);\n  }\n  @Input() outerContainerClass: string;\n  @Input() outerContainerStyle: any;\n  @Input() toolbarClass: string;\n  @Input() toolbarStyle: any;\n  @Input() compareRowsClass: string;\n  @Input() compareRowsStyle: any;\n  @Input() synchronizeScrolling = true;\n  @Output() compareResults = new EventEmitter<DiffResults>();\n  subscriptions: Subscription[] = [];\n  tableRows: DiffTableRowResult[] = [];\n  filteredTableRows: DiffTableRowResult[] = [];\n  tableRowsLineByLine: DiffTableRowResult[] = [];\n  filteredTableRowsLineByLine: DiffTableRowResult[] = [];\n  diffsCount = 0;\n\n  formatOptions: DiffTableFormatOption[] = [\n    {\n      id: 'side-by-side',\n      name: 'side-by-side',\n      label: 'Side by Side',\n      value: 'SideBySide',\n      icon: 'la-code',\n    },\n    {\n      id: 'line-by-line',\n      name: 'line-by-line',\n      label: 'Line by Line',\n      value: 'LineByLine',\n      icon: 'la-file-text',\n    },\n  ];\n\n  constructor(private scrollService: ScrollDispatcher, private diff: NgxTextDiffService, private cd: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.loading = true;\n    if (this.diffContent) {\n      this.subscriptions.push(\n        this.diffContent.subscribe(content => {\n          this.loading = true;\n          this.left = content.leftContent;\n          this.right = content.rightContent;\n          this.renderDiffs()\n            .then(() => {\n              this.cd.detectChanges();\n              this.loading = false;\n            })\n            .catch(() => (this.loading = false));\n        })\n      );\n    }\n    this.renderDiffs()\n      .then(() => (this.loading = false))\n      .catch(e => (this.loading = false));\n  }\n\n  ngAfterViewInit() {\n    this.initScrollListener();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n  }\n\n  hideMatchingLinesChanged(value: boolean) {\n    this._hideMatchingLines = value;\n    if (this.hideMatchingLines) {\n      this.filteredTableRows = this.tableRows.filter(\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\n      );\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine.filter(\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\n      );\n    } else {\n      this.filteredTableRows = this.tableRows;\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\n    }\n  }\n\n  setDiffTableFormat(format: DiffTableFormat) {\n    this.format = format;\n  }\n\n  async renderDiffs() {\n    try {\n      this.diffsCount = 0;\n      this.tableRows = await this.diff.getDiffsByLines(this.left, this.right);\n      this.tableRowsLineByLine = this.tableRows.reduce((tableLineByLine: DiffTableRowResult[], row: DiffTableRowResult) => {\n        if (!tableLineByLine) {\n          tableLineByLine = [];\n        }\n        if (row.hasDiffs) {\n          if (row.leftContent) {\n            tableLineByLine.push({\n              leftContent: row.leftContent,\n              rightContent: null,\n              belongTo: row.belongTo,\n              hasDiffs: true,\n              numDiffs: row.numDiffs,\n            });\n          }\n          if (row.rightContent) {\n            tableLineByLine.push({\n              leftContent: null,\n              rightContent: row.rightContent,\n              belongTo: row.belongTo,\n              hasDiffs: true,\n              numDiffs: row.numDiffs,\n            });\n          }\n        } else {\n          tableLineByLine.push(row);\n        }\n\n        return tableLineByLine;\n      }, []);\n      this.diffsCount = this.tableRows.filter(row => row.hasDiffs).length;\n      this.filteredTableRows = this.tableRows;\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\n      this.emitCompareResultsEvent();\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  emitCompareResultsEvent() {\n    const diffResults: DiffResults = {\n      hasDiff: this.diffsCount > 0,\n      diffsCount: this.diffsCount,\n      rowsWithDiff: this.tableRows\n        .filter(row => row.hasDiffs)\n        .map(row => ({\n          leftLineNumber: row.leftContent ? row.leftContent.lineNumber : null,\n          rightLineNumber: row.rightContent ? row.rightContent.lineNumber : null,\n          numDiffs: row.numDiffs,\n        })),\n    };\n\n    this.compareResults.next(diffResults);\n  }\n\n  trackTableRows(index, row: DiffTableRowResult) {\n    return row && row.leftContent ? row.leftContent.lineContent : row && row.rightContent ? row.rightContent.lineContent : undefined;\n  }\n\n  trackDiffs(index, diff: DiffPart) {\n    return diff && diff.content ? diff.content : undefined;\n  }\n\n  private initScrollListener() {\n    this.subscriptions.push(this.scrollService.scrolled().subscribe((scrollableEv: CdkScrollable) => {\n      if (scrollableEv && this.synchronizeScrolling) {\n        const scrollableId = scrollableEv.getElementRef().nativeElement.id;\n        const nonScrolledContainer: ContainerDirective = this.containers.find(container => container.id !== scrollableId);\n        if (nonScrolledContainer) {\n          nonScrolledContainer.element.scrollTo({\n            top: scrollableEv.measureScrollOffset('top'),\n            left: scrollableEv.measureScrollOffset('left'),\n          });\n        }\n      }\n    }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTextDiffComponent } from './ngx-text-diff.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { LoaderSpinnerComponent } from './loader-spinner/loader-spinner.component';\nimport { FormatLinePipe } from './format-line.pipe';\nimport { ContainerDirective } from './ngx-text-diff-container.directive';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ScrollingModule],\n  declarations: [NgxTextDiffComponent, LoaderSpinnerComponent, FormatLinePipe, ContainerDirective],\n  exports: [NgxTextDiffComponent],\n})\nexport class NgxTextDiffModule {}\n","/*\n * Public API Surface of ngx-text-diff\n */\n\nexport * from './lib/ngx-text-diff.service';\nexport * from './lib/ngx-text-diff.component';\nexport * from './lib/ngx-text-diff.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}